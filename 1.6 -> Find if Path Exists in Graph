https://leetcode.com/problems/find-if-path-exists-in-graph/description/

Input: 
-------
n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2

Example 2:
---------
Input: 
------
n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.

Approch:
------
Hama yaha Src dia hai and hama destination pe phuchna hai so we can use BFS.

Code:
----
bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        unordered_map<int,list<int>> adjList;
        
        for(int i=0;i<edges.size();i++){
            vector<int> temp = edges[i];
            int u = temp[0];
            int v = temp[1];
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }

        unordered_map<int,bool> visited;
        queue<int> q;
        //initial steps
        q.push(source);
        visited[source] = true;

        while(!q.empty()){
            int frontNode = q.front();
            q.pop();
            for(auto neighbour: adjList[frontNode]){
                if(!visited[neighbour]){
                    q.push(neighbour);
                    visited[neighbour] = true;
                }
                
            }
        }
        return visited[destination];
    }
