https://leetcode.com/problems/rotting-oranges/

Example 1:
----------
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
---------
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
---------
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.

Approch:
-------
 //step 1: pehla check koi fresh oranges tho nai agr nai hai tho 0 time lagenga sardana mai
           //check agr ek bhi fresh nai hua tho hama 0 time lagega usa sardana mai
           
 //step 2: ab hum rotten oranges ka indexes dalenga queue mai 
 
 //step 2.1: sardana chalu karta hai oranges ko
 
 //step 3: check agar sara oranges sardana ka baad bhi ek fresh orange bach gaya tho return -1 karna hai
 
code:
-----
bool checkAgaSardaSaktaHai(int x,int y,int n,int m,vector<vector<int>>& grid){
        if(x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 1){
            return true;
        }

        return false;
    }
    int orangesRotting(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();
        int fresh = 0;
        int time = 0;
        queue<pair<int,int>> q;
        //step 1: pehla check koi fresh oranges tho nai agr nai hai tho 0 time lagenga sardana mai
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }

        //check agr ek bhi fresh nai hua tho hama 0 time lagega usa sardana mai
        if(fresh == 0){
            return time;
        }

        //step 2: ab hum rotten oranges ka indexes dalenga queue mai 
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 2){
                    q.push({i,j});
                }
            }
        }

        //step 2.1: sardana chalu karta hai oranges ko
        while(!q.empty()){
            int q_size = q.size();
            int temp = 0;

            while(q_size != 0){
                pair<int,int> front = q.front();
                q.pop();

                int x1 = front.first;
                int y1 = front.second;

                int x_axis[4] = {1,-1,0,0};
                int y_axis[4] = {0,0,1,-1};

                for(int i=0;i<4;i++){
                    int x = x_axis[i] + x1;
                    int y = y_axis[i] + y1;

                    if(checkAgaSardaSaktaHai(x,y,n,m,grid) == true){
                        //temp ++ karo qki kuch sarda hai and agr jo fresh orange hai usa sara do
                        temp++;
                        grid[x][y] = 2;
                        q.push({x,y});
                    }
                }
                q_size--;
            }

            if(temp != 0){
                time++;
            }
        }


        //step 3: check agar sara oranges sardana ka baad bhi ek fresh orange bach gaya tho return -1 karna hai
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1){
                    time = 0;
                }
            }
        }

        if(time == 0){
            return -1;
        }
        return time;
        
    }
